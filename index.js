// Generated by CoffeeScript 1.6.3
(function() {
  var fs, lm, qrAuth, yaqrcode;

  fs = require('fs');

  lm = require('lib/login-manager.coffee');

  yaqrcode = require('yaqrcode');

  qrAuth = function(options) {
    var exclude, keygen, maxAge, url;
    exclude = options.exclude, maxAge = options.maxAge, keygen = options.keygen, url = options.url;
    return function(req, res, next) {
      var action, hash, sid, timestamp, username, _ref;
      if ((exclude != null) && exclude.indexOf(req.url) > -1) {
        next();
      }
      if (req.method === 'POST') {
        res.writeHead(200, {
          'Content-Type': 'text/html'
        });
        _ref = req.body, username = _ref.username, hash = _ref.hash, sid = _ref.sid, action = _ref.action;
        if (hash != null) {
          timestamp = parseInt((new Date().getTime()) / 1000 / 30);
          keygen(username, function(key) {
            var hmac;
            key = (new Buffer(key)).toString('hex');
            hmac = crypto.createHmac('sha512', key);
            hmac.setEncoding('hex');
            hmac.write([username, sid, timestamp].join(''));
            hmac.end();
            if (hash === hmac.read()) {
              lm.login(sid);
              return res.write(JSON.stringify({
                status: "success"
              }));
            } else {
              return res.write(JSON.stringify({
                status: "error",
                error: "hash not match"
              }));
            }
          });
        } else {
          ({
            login: lm.test(sid)
          });
        }
        return res.end();
      } else {
        sid = req.sessionID;
        if (lm.test(sid)) {
          return next();
        } else {
          res.writeHead(200, {
            'Content-Type': 'text/html'
          });
          return fs.readFile("template.html", {
            encoding: 'UTF-8'
          }, function(err, html) {
            var base64, json;
            json = {
              sid: sid,
              remote: req.protocol + "://" + req.get('host') + req.url
            };
            json = JSON.stringify(json);
            base64 = yaqrcode(json);
            html = html.replace(new RegExp('{{qrcode}}', 'g'), base64);
            res.write(html);
            return res.end();
          });
        }
      }
    };
  };

  module.exports = qrAuth;

}).call(this);
